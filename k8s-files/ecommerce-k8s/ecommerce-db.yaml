apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: ecommerce
data:
  mysql-root-password: cGFzc3dvcmQ=  # Base64 encoding of 'password'
  mysql-password: UGFzczEyMy4=  # Base64 encoding of 'Pass123.'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: ecommerce
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: ecommerce
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: ecommerce_db
            - name: MYSQL_USER
              value: admin
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-pv
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-pv
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: ecommerce
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    app: mysql
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mysql-init
  namespace: ecommerce
spec:
  template:
    spec:
      containers:
        - name: mysql-init
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_USER
              value: admin
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          command: ["sh", "-c", "until mysqladmin ping -h mysql --silent; do echo waiting for mysql; sleep 5; done; mysql -h mysql -u admin -p${MYSQL_PASSWORD} ecommerce_db < /schema.sql"]
          volumeMounts:
            - name: schema-volume
              mountPath: /schema.sql
              subPath: schema.sql
      restartPolicy: OnFailure
      volumes:
        - name: schema-volume
          configMap:
            name: mysql-schema
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-schema
  namespace: ecommerce
data:
  schema.sql: |
    CREATE TABLE Store (
        id VARCHAR(255) PRIMARY KEY,
        name VARCHAR(255),
        userId VARCHAR(255),
        createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
        updatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP
    );

    CREATE TABLE Billboard (
        id VARCHAR(255) PRIMARY KEY,
        storeId VARCHAR(255),
        label VARCHAR(255),
        imageUrl VARCHAR(255),
        createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
        updatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (storeId) REFERENCES Store(id)
    );

    CREATE TABLE Category (
        id VARCHAR(255) PRIMARY KEY,
        storeId VARCHAR(255),
        billboardId VARCHAR(255),
        name VARCHAR(255),
        createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
        updatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (storeId) REFERENCES Store(id),
        FOREIGN KEY (billboardId) REFERENCES Billboard(id)
    );

    CREATE TABLE Size (
        id VARCHAR(255) PRIMARY KEY,
        storeId VARCHAR(255),
        name VARCHAR(255),
        value VARCHAR(255),
        createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
        updatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (storeId) REFERENCES Store(id)
    );

    CREATE TABLE Color (
        id VARCHAR(255) PRIMARY KEY,
        storeId VARCHAR(255),
        name VARCHAR(255),
        value VARCHAR(255),
        createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
        updatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (storeId) REFERENCES Store(id)
    );

    CREATE TABLE Product (
        id VARCHAR(255) PRIMARY KEY,
        storeId VARCHAR(255),
        categoryId VARCHAR(255),
        name VARCHAR(255),
        price DECIMAL(10,2),
        isFeatured BOOLEAN DEFAULT FALSE,
        isArchived BOOLEAN DEFAULT FALSE,
        sizeId VARCHAR(255),
        colorId VARCHAR(255),
        createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
        updatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (storeId) REFERENCES Store(id),
        FOREIGN KEY (categoryId) REFERENCES Category(id),
        FOREIGN KEY (sizeId) REFERENCES Size(id),
        FOREIGN KEY (colorId) REFERENCES Color(id)
    );

    CREATE TABLE `Order` (
        id VARCHAR(255) PRIMARY KEY,
        storeId VARCHAR(255),
        isPaid BOOLEAN DEFAULT FALSE,
        phone VARCHAR(255) DEFAULT "",
        address VARCHAR(255) DEFAULT "",
        createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
        updatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (storeId) REFERENCES Store(id)
    );

    CREATE TABLE OrderItem (
        id VARCHAR(255) PRIMARY KEY,
        orderId VARCHAR(255),
        productId VARCHAR(255),
        FOREIGN KEY (orderId) REFERENCES `Order`(id),
        FOREIGN KEY (productId) REFERENCES Product(id)
    );

    CREATE TABLE Image (
        id VARCHAR(255) PRIMARY KEY,
        productId VARCHAR(255),
        url VARCHAR(255),
        createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
        updatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (productId) REFERENCES Product(id) ON DELETE CASCADE
    );
